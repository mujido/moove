//Copyright (c) 2004 Kurt Stutsman. All rights reserved.
/**
 * \file
 */
#ifndef MOOVE_AST_VISITOR_HPP
#define MOOVE_AST_VISITOR_HPP

#include "expr_ast.hpp"
#include "stmt_ast.hpp"

#include <stdexcept>

namespace Moove {

class Program;

/**
 * \brief Abstract base for classes to traverse AST program trees
 *
 * Implementations of this class can be used to traverse an AST tree
 * through the Program::accept(), Expr::Expr::accept(), and 
 * Stmt::Stmt::accept() methods.
 *
 * When an AST tree is generated by the parser system, it will be
 * available in a Program object. Using this object and an instance of
 * an implementation of ASTVisitor, the instance may be passed into the
 * ASTVisitor object's Program::accept() method. From there, each
 * Stmt::Stmt object can then have the visitor accepted and 
 * ASTVisitor::visit() method with the correct argument signature will
 * be called. This behavior will occur for all the AST classes that
 * appear within the signatures of the ASTVisitor::visit() methods.
 */
struct ASTVisitor {
   virtual ~ASTVisitor()
   {}

   /**
    * \brief Visit an AST Program object
    *
    * Begin descending the AST tree given the Program object
    */
   virtual void visit(const Program& program) = 0;

   //@{
   /**
    * \brief Visit an AST Expr::Expr object
    *
    * This method will be called if an Expr::Expr::accept() method is
    * called with an ASTVisitor instance and that object is of the
    * dynamic type of the argument to this method.
    */
   virtual void visit(const Expr::Integer&) = 0;

   virtual void visit(const Expr::Objnum&) = 0;

   virtual void visit(const Expr::Str&) = 0;

   virtual void visit(const Expr::Real&) = 0;

   virtual void visit(const Expr::List&) = 0;

   virtual void visit(const Expr::Variable&) = 0;

   virtual void visit(const Expr::Scatter&) = 0;

   virtual void visit(const Expr::Scatter::Target&) = 0;

   virtual void visit(const Expr::Not&) = 0;

   virtual void visit(const Expr::Negate&) = 0;

   virtual void visit(const Expr::Splice&) = 0;

   virtual void visit(const Expr::PreInc&) = 0;

   virtual void visit(const Expr::PreDec&) = 0;

   virtual void visit(const Expr::PostInc&) = 0;

   virtual void visit(const Expr::PostDec&) = 0;

   virtual void visit(const Expr::Or&) = 0;

   virtual void visit(const Expr::And&) = 0;

   virtual void visit(const Expr::Equal&) = 0;

   virtual void visit(const Expr::NotEqual&) = 0;

   virtual void visit(const Expr::Less&) = 0;

   virtual void visit(const Expr::LessEqual&) = 0;

   virtual void visit(const Expr::GreaterEqual&) = 0;

   virtual void visit(const Expr::Greater&) = 0;

   virtual void visit(const Expr::In&) = 0;

   virtual void visit(const Expr::Add&) = 0;

   virtual void visit(const Expr::Sub&) = 0;

   virtual void visit(const Expr::Mul&) = 0;

   virtual void visit(const Expr::Div&) = 0;

   virtual void visit(const Expr::Mod&) = 0;
   
   virtual void visit(const Expr::Exp&) = 0;

   virtual void visit(const Expr::Assign&) = 0;

   virtual void visit(const Expr::AddEqual&) = 0;

   virtual void visit(const Expr::SubEqual&) = 0;

   virtual void visit(const Expr::MulEqual&) = 0;

   virtual void visit(const Expr::DivEqual&) = 0;

   virtual void visit(const Expr::ModEqual&) = 0;

   virtual void visit(const Expr::ExpEqual&) = 0;

   virtual void visit(const Expr::Conditional&) = 0;

   virtual void visit(const Expr::Index&) = 0;

   virtual void visit(const Expr::Range&) = 0;

   virtual void visit(const Expr::Catch&) = 0;

   virtual void visit(const Expr::Prop&) = 0;

   virtual void visit(const Expr::SystemProp&) = 0;

   virtual void visit(const Expr::SystemCall&) = 0;

   virtual void visit(const Expr::VerbCall&) = 0;

   virtual void visit(const Expr::Builtin&) = 0;

   virtual void visit(const Expr::Length&) = 0;
   //@}

   //@{
   /**
    * \brief Visit an AST Stmt::Stmt object
    *
    * This method will be called if a Stmt::Stmt::accept() method is
    * called with an ASTVisitor instance and that object is of the
    * dynamic type of the argument to this method.
    */
   virtual void visit(const Stmt::If&) = 0;

   virtual void visit(const Stmt::If::Else&) = 0;

   virtual void visit(const Stmt::While&) = 0;

   virtual void visit(const Stmt::ForList&) = 0;

   virtual void visit(const Stmt::ForRange&) = 0;

   virtual void visit(const Stmt::TryExcept&) = 0;

   virtual void visit(const Stmt::TryExcept::Except&) = 0;

   virtual void visit(const Stmt::TryFinally&) = 0;

   virtual void visit(const Stmt::Fork&) = 0;

   virtual void visit(const Stmt::Switch&) = 0;

   virtual void visit(const Stmt::Switch::Case&) = 0;

   virtual void visit(const Stmt::Return&) = 0;

   virtual void visit(const Stmt::Continue&) = 0;

   virtual void visit(const Stmt::Break&) = 0;

   virtual void visit(const Stmt::ExprStmt&) = 0;
   //@}
};
  
}   //namespace Moove

#endif   //MOOVE_AST_VISITOR_HPP
